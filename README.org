#+title: Git Guide
#+author: Jackson Baker & Hannah Ramsden
* Individual lab
Welcome to the SE300 Git lab. This lab will help you understand how programming works in a group industry setting, utilizing the standard version control software Git. It will also walk you through the steps to manage an individual project with version control using Git and a remote code repository hosted on GitHub.
** Step 1: Create a GitHub account
If you do not have a GitHub account, click the sign-up button at the upper right corner of this page.
** Step 2: Install git
*** Windows OS

**** Installer:
The Windows version of git is located at [[https://git-scm.com/downloads/win]]. The installer is a simple wizard, so click through until it is installed.
**** Winget:
If you have Winget installed, you can install git through Powershell using the following command:
#+begin_src zsh
winget install --id Git.Git -e --source winget
#+end_src

*** MacOS
**** Xcode:
MacOS users can download XCode through the Apple App Store. Xcode can be installed here [[https://apps.apple.com/us/app/xcode/id497799835?mt=12]]
**** Homebrew:
If you have homebrew installed run the following command to install git.
#+begin_src zsh
brew install git
#+end_src
If you do not have Homebrew installed, the link to install Homebrew is [[https://brew.sh/]]
**** MacPorts
If MacPorts is installed, you can run the following command to install git:
#+begin_src zsh
sudo port install git
#+end_src
 MacPorts is installed from this link: [[https://www.macports.org/]]

**** Alternative Installation Methods:
The official Git website lists several other alternative ways to install git, and can be found at [[https://git-scm.com/downloads/mac]]

*** Linux:
Git for some Linux distributions comes by default but below is a list of how to install git for several Linux and Unix distributions. If these commands do not work and give a permission denied error, add sudo to the beginning of the command.
**** Debian
#+begin_src zsh
sudo apt-get install git
#+end_src
or
#+begin_src zsh
sudo apt install git
#+end_src
**** Fedora
#+begin_src zsh
yum install git
#+end_src
or depending on Fedora version
#+begin_src zsh
dnf install git
#+end_src
**** Gentoo
#+begin_src zsh
sudo emerge --ask dev-vcs/git
#+end_src
**** Arch
#+begin_src zsh
sudo pacman -S git
#+end_src
**** openSUSE
#+begin_src zsh
zypper install git
#+end_src
**** Mageia
#+begin_src zsh
urpmi git
#+end_src
**** Nix/NixOS
#+begin_src zsh
nix-env -i git
#+end_src
**** FreeBSD
#+begin_src zsh
pkg install git
#+end_src
**** Solaris 9/10/11
#+begin_src zsh
pkgutil -i git
#+end_src
**** Solaris 11 Express
#+begin_src zsh
pkg install developer/versioning/git
#+end_src
**** OpenBSD
#+begin_src zsh
pkg_add git
#+end_src
**** Alpine
#+begin_src zsh
apk add git
#+end_src
**** Slitaz
#+begin_src zsh
tazpkg get-install git
#+end_src

** Step 3: Connecting Git and GitHub
There are several ways to connect a Git repository and a GitHub account. However, some steps must be completed before connecting to GitHub. Git has a config file on your computer that tracks who you are when making changes to repositories.

Setting a username:
#+begin_src zsh
git config --global user.name "Your username goes here"
#+end_src

Setting an email:
#+begin_src zsh
git config --global user.email "Your GitHub email goes here"
#+end_src

*** Connect by VScode
[[https://code.visualstudio.com/docs/sourcecontrol/intro-to-git]]

*** Connect by Xcode
[[https://developer.apple.com/documentation/xcode/configuring-your-xcode-project-to-use-source-control]]

*** Connect by SSH key
GitHub has a guide for adding and using a ssh-key which can be found here [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent]]

*** Connect via GitHub Web
** Step 4: Making a repository
This way of making a repository is the simplest when using git or Git Hub. Alternative methods require knowledge that will be given in later sections.
**** Go to the GitHub profile
if you have already made a GitHub account your dashboard should be visible from [[https://github.com]] from here you can create a new repository from the repository bar on the left

[[./images/newRepo.png]]

**** Repository Name and Creation:
A repository needs a name for this assignment, fill in the field with "SE300HelloWorld"

[[./images/newRepoName.png]]

Once the repository name is filled in, click the "Create" button. The repository should be created on GitHub.
**** Final product
Your newly created repository should look like the picture below:

[[./images/initialRepoState.png]]

** Step 5: Pull the Git repository from GitHub to your computer:
Once you have made your repository on GitHub, the next step is to pull the repository onto your computer to make changes. This can be done with the following command:
*** Command Line
#+begin_src zsh
git clone "link to your GitHub goes here"
#+end_src

*** Vscode:
Select the source control tab on the left-hand side

[[./images/vscodeSourceControl.png]]

After clicking this symbol, you will see the following window:

[[./images/vscodeSourceControlWindow.png]]

Clicking on "Clone Repository" will give the following prompt at the top of the VScode window

[[./images/cloneFromGithubvscode.png]]

Clicking on the "Clone From GitHub" tab will ask for permission to log into GitHub. Log in, and your repo will be cloned.

Permission will look similar to this screenshot

[[./images/vscodeVerifyGithub.png]]

Once permission is given the top of the VScode window will look something like this

[[./images/vscodeCloneRepo.png]]

After the Hello World repo has been selected, vscode will prompt for a location to clone your repo. After selecting your preferred location, vscode will have the repository cloned and look like the image below.

[[./images/vscodeCloneRepoExplorer.png]]

*** Using the GitHub App
For the desktop application, click the "add" drop-down. From there, select "Clone Repository..." and choose the "SE300HelloWorld" repository created earlier.

** Step 6: Making Changes to the Git Repo
Git has a system on how it tracks files and while it will seem complicated at first it is a simple process. First is to track and stage a file then to commit the file changes to the git repo and finally push the committed changes back to github.
*** tracking files
git first needs a list of what files in its directory to be tracked this can be done with the terminal command git add
#+begin_src zsh
git add <Your file goes here>
#+end_src

*** Step 7: Staging Files
Behind the scenes, Git requires staged and unstaged changes to select which files will be added to a commit. The command, "Git add," will automatically stage a file. when making changes to a file, you will need to stage the commit before it can be made. This can be done with:

#+begin_src zsh
git stage <Your file goes here>
#+end_src

"Git Add" will also work as the git documentation, describing both git add and git stage as synonyms.
*** Step 8: Committing changes
Git commits act like a save state you can roll back to. This is similar to the video game quicksaving before an event where you stand a high chance of dying. Both staging and tracking are the setup to making a commit for your version control. A commit needs both staged files and a message. In the command line, it would look something like this:
#+begin_src zsh
git commit -m "Your message goes here"
#+end_src
Remember that messages in git have an upper limit of 50 characters, so make messages short.

*** Step 9: Making branches
When multiple people are working on a remote git repository it may be best to keep work separate if two people make commits around the same time it could block the other's work. To keep individual work separate you can use git branches to not interrupt other people's changes. A git branch can be made with the following command.
#+begin_src zsh
git checkout -b <Your new branch name>
#+end_src
branches can also be made on GitHub by selecting the "branches" button

[[./images/gitBranch2.png]]

on your repository and selecting "new branch"

[[./images/gitBranch3.png]]

this branch will need to be pulled locally and can be pulled with the command:
#+begin_src zsh
git pull
#+end_src
to change to the new branch, if it is made on GitHub use the command
#+begin_src zsh
git checkout <Your github branch name>
#+end_src
** Pushing the git repo back to GitHub
After you have made all the changes you can use the command git push to upload your changes to github.
#+begin_src zsh
git push
#+end_src
** Step 10: Merging branches
After you've made branches and commits. The next step is to merge branches. Merging a branch is a simple procedure on github.
*** Step 11: compare and pull request
after a new branch is pushed to a notification will show up on github looking like this

[[./images/gitBranch1.png]]

selecting this button will open a new page to create a pull request to merge two branches.

[[./images/gitBranch4.png]]

Creating the pull request will leave it open. Approving the pull request and merging it will close it, merging the two branches.

[[./images/gitBranch5.png]]

After the pull request has been merged you can either choose to delete the branch or keep commiting changes and merge again at a later date.
** Final Product: Completed Repo
Upload your finished Lab document to your new repository. 
